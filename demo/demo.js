(()=>{"use strict";var __webpack_modules__={671:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Demo\n\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js\nvar eventemitter3 = __webpack_require__(34);\nvar eventemitter3_default = /*#__PURE__*/__webpack_require__.n(eventemitter3);\n;// CONCATENATED MODULE: ./esm/TweenableColorTicker.js\nvar _a;\n\nclass TweenableColorTicker {\n  static get rafID() {\n    return this._rafID;\n  }\n  static start(now) {\n    if (!this._rafID) {\n      this.rafCallback(now ?? performance.now());\n    }\n  }\n  static stop() {\n    if (this._rafID) {\n      cancelAnimationFrame(this._rafID);\n      this._rafID = undefined;\n    }\n  }\n  static update(ms) {\n    this.ticker.emit("raf", ms);\n  }\n}\n_a = TweenableColorTicker;\nTweenableColorTicker.ticker = new (eventemitter3_default())();\nTweenableColorTicker.rafCallback = ms => {\n  _a.update(ms);\n  _a._rafID = requestAnimationFrame(_a.rafCallback);\n};\n// EXTERNAL MODULE: ./node_modules/color/index.js\nvar node_modules_color = __webpack_require__(772);\nvar color_default = /*#__PURE__*/__webpack_require__.n(node_modules_color);\n;// CONCATENATED MODULE: ./esm/color/HSLColor.js\n\n\nclass HSLColor {\n  constructor(h = 0, s = 0, l = 0, alpha = 1.0) {\n    this.h = h;\n    this.s = s;\n    this.l = l;\n    this.alpha = alpha;\n  }\n  toRGB() {\n    const hslObj = this.toColor();\n    return new RGBColor(hslObj.red(), hslObj.green(), hslObj.blue(), hslObj.alpha());\n  }\n  toColor() {\n    return color_default().hsl({\n      h: this.h,\n      l: this.l,\n      s: this.s,\n      alpha: this.alpha\n    });\n  }\n  set(rgbObj) {\n    const color = color_default().rgb(rgbObj);\n    this.h = color.hue();\n    this.l = color.lightness();\n    this.s = color.saturationl();\n    this.alpha = color.alpha();\n  }\n  setRGBA(r, g, b, alpha) {\n    const color = color_default().rgb({\n      r,\n      g,\n      b,\n      alpha\n    });\n    this.h = color.hue();\n    this.l = color.lightness();\n    this.s = color.saturationl();\n    this.alpha = color.alpha();\n  }\n}\n;// CONCATENATED MODULE: ./esm/color/RGBColor.js\n\nclass RGBColor {\n  constructor(r = 0, g = 0, b = 0, alpha = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.alpha = alpha;\n  }\n  static fromColor(color) {\n    return new RGBColor(color.red(), color.green(), color.blue(), color.alpha());\n  }\n  set(rgba) {\n    this.r = rgba.r;\n    this.g = rgba.g;\n    this.b = rgba.b;\n    this.alpha = rgba.alpha;\n  }\n  setRGBA(r, g, b, alpha) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.alpha = alpha;\n  }\n  equalRGBA(r, g, b, alpha) {\n    return this.r == r && this.g == g && this.b == b && this.alpha == alpha;\n  }\n  mix(from, to, t) {\n    const rt = 1 - t;\n    this.r = to.r * t + from.r * rt;\n    this.g = to.g * t + from.g * rt;\n    this.b = to.b * t + from.b * rt;\n    this.alpha = to.alpha * t + from.alpha * rt;\n  }\n  mixHSL(from, to, t) {\n    const rt = 1 - t;\n    const hsl = new HSLColor();\n    hsl.h = to.h * t + from.h * rt;\n    hsl.s = to.s * t + from.s * rt;\n    hsl.l = to.l * t + from.l * rt;\n    hsl.alpha = to.alpha * t + from.alpha * rt;\n    this.set(hsl.toRGB());\n  }\n}\n;// CONCATENATED MODULE: ./esm/TweenableColor.js\n\n\n\n\nclass TweenableColor extends eventemitter3.EventEmitter {\n  constructor(r = 0, g = 0, b = 0, alpha = 1.0) {\n    super();\n    this.from = new RGBColor();\n    this.to = new RGBColor();\n    this.startTime = 0;\n    this.duration = 0;\n    this.easing = tween_esm/* Easing.Linear.None */.oY.Linear.None;\n    this.onTick = ms => {\n      const isComplete = this.onComplete(ms);\n      if (isComplete) return;\n      this.updateColor(ms);\n    };\n    this.color = new RGBColor(r, g, b, alpha);\n  }\n  change(toR, toG, toB, toAlpha, duration, option) {\n    const changeOption = TweenableColor.initOption(option);\n    if (this.color.equalRGBA(toR, toG, toB, toAlpha)) return;\n    TweenableColorTicker.ticker.removeListener("raf", this.onTick);\n    this.initFromAndTo(toR, toG, toB, toAlpha);\n    this.startTime = changeOption.startTime ?? performance.now();\n    this.duration = duration;\n    this.easing = changeOption.easing;\n    TweenableColorTicker.ticker.on("raf", this.onTick);\n  }\n  initFromAndTo(toR, toG, toB, toAlpha) {\n    this.to.setRGBA(toR, toG, toB, toAlpha);\n    this.from.set(this.color);\n  }\n  updateColor(ms) {\n    const t = this.easing((ms - this.startTime) / this.duration);\n    this.color.mix(this.from, this.to, t);\n    this.emit("onUpdate", this);\n  }\n  onComplete(ms) {\n    if (ms > this.startTime + this.duration) {\n      this.color.set(this.to);\n      TweenableColorTicker.ticker.removeListener("raf", this.onTick);\n      this.emit("onUpdate", this);\n      this.emit("onComplete", this);\n      return true;\n    }\n    return false;\n  }\n  static initOption(option) {\n    option ??= {};\n    option.easing ??= tween_esm/* Easing.Linear.None */.oY.Linear.None;\n    return option;\n  }\n  getAttribute() {\n    return [this.color.r / 255, this.color.g / 255, this.color.b / 255, this.color.alpha];\n  }\n  getCSSStyle() {\n    return `rgba(${Math.round(this.color.r)},${Math.round(this.color.g)},${Math.round(this.color.b)},${this.color.alpha})`;\n  }\n  getCSSColor() {\n    return `rgb(${Math.round(this.color.r)},${Math.round(this.color.g)},${Math.round(this.color.b)})`;\n  }\n  getAlpha() {\n    return this.color.alpha.toString();\n  }\n  clone() {\n    return new TweenableColor(this.color.r, this.color.g, this.color.b, this.color.alpha);\n  }\n}\n;// CONCATENATED MODULE: ./esm/TweenableHSL.js\n\n\nclass TweenableHSL extends TweenableColor {\n  constructor() {\n    super(...arguments);\n    this.fromHSL = new HSLColor();\n    this.toHSL = new HSLColor();\n  }\n  initFromAndTo(toR, toG, toB, toAlpha) {\n    super.initFromAndTo(toR, toG, toB, toAlpha);\n    this.fromHSL.set(this.color);\n    this.toHSL.setRGBA(toR, toG, toB, toAlpha);\n  }\n  updateColor(ms) {\n    const t = this.easing((ms - this.startTime) / this.duration);\n    this.color.mixHSL(this.fromHSL, this.toHSL, t);\n    this.emit("onUpdate", this);\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.ts\n\n\nvar Demo = /** @class */ (function () {\n    function Demo() {\n        TweenableColorTicker.start();\n        var color = new TweenableColor();\n        var rect = Demo.getRect(color, 0, 0);\n        document.body.appendChild(rect);\n        Demo.animateColor(color, rect);\n        var hsl = new TweenableHSL();\n        var rectHSL = Demo.getRect(hsl, 0, 160);\n        document.body.appendChild(rectHSL);\n        Demo.animateColor(hsl, rectHSL);\n    }\n    Demo.getRect = function (color, x, y) {\n        var rect = document.createElement("div");\n        rect.style.width = "100px";\n        rect.style.height = "100px";\n        rect.style.top = x + "px";\n        rect.style.left = y + "px";\n        rect.style.position = "absolute";\n        rect.style.backgroundColor = color.getCSSColor();\n        rect.style.opacity = color.getAlpha();\n        return rect;\n    };\n    Demo.animateColor = function (color, rect) {\n        color.on("onUpdate", function (e) {\n            rect.style.backgroundColor = e.getCSSColor();\n            rect.style.opacity = e.getAlpha();\n        });\n        color.change(255, 16, 16, 1, 8000, { easing: tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out });\n        setTimeout(function () {\n            color.change(0, 255, 255, 1.0, 6000, { easing: tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out });\n        }, 10000);\n    };\n    return Demo;\n}());\n\nwindow.onload = function () {\n    new Demo();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///671\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(L=0;L<deferred.length;L++){for(var[U,F,B]=deferred[L],I=!0,i=0;i<U.length;i++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[i])))?U.splice(i--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(L--,1);var t=F();void 0!==t&&(Q=t)}}return Q}B=B||0;for(var L=deferred.length;L>0&&deferred[L-1][2]>B;L--)deferred[L]=deferred[L-1];deferred[L]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={577:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,i,t]=F,L=0;if(I.some((U=>0!==Q[U]))){for(B in i)__webpack_require__.o(i,B)&&(__webpack_require__.m[B]=i[B]);if(t)var x=t(__webpack_require__)}for(U&&U(F);L<I.length;L++)s=I[L],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(x)},F=self.webpackChunk_masatomakino_tweenable_color=self.webpackChunk_masatomakino_tweenable_color||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(671)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();